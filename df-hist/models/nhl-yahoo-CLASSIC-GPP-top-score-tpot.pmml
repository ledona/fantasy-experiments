<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<PMML xmlns="http://www.dmg.org/PMML-4_4" xmlns:data="http://jpmml.org/jpmml-model/InlineTable" version="4.4">
	<Header>
		<Application name="JPMML-SkLearn library" version="1.7.10"/>
		<Timestamp>2022-09-04T03:11:20Z</Timestamp>
	</Header>
	<MiningBuildTask>
		<Extension name="repr">PMMLPipeline(steps=[('mapper', DataFrameMapper(drop_cols=[],
                features=[(['best-possible-score'],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (['team_count'],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (['team-med'],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (['team-70.0th_pctl'],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (["('med-dfs', 'C')"],
                           Continuou...
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (["('70.0th-pctl-dfs', 'C')"],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (["('70.0th-pctl-dfs', 'D')"],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (["('70.0th-pctl-dfs', 'G')"],
                           ContinuousDomain(invalid_value_treatment='as_is')),
                          (["('70.0th-pctl-dfs', 'W')"],
                           ContinuousDomain(invalid_value_treatment='as_is'))])),
       ('selectpercentile', SelectorProxy(selector=SelectPercentile(percentile=83,
                                        score_func=&lt;function f_regression at 0x7f4a5f835d80&gt;))),
       ('pca', PCA(iterated_power=10, svd_solver='randomized')),
       ('adaboostregressor', AdaBoostRegressor(learning_rate=0.1, loss='square', n_estimators=100))])</Extension>
	</MiningBuildTask>
	<DataDictionary>
		<DataField name="top_score" optype="continuous" dataType="double"/>
		<DataField name="best-possible-score" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="133.20000000000002" rightMargin="185.9"/>
		</DataField>
		<DataField name="team_count" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="4.0" rightMargin="16.0"/>
		</DataField>
		<DataField name="team-med" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="2.5" rightMargin="3.5"/>
		</DataField>
		<DataField name="team-70.0th_pctl" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="3.0" rightMargin="4.0"/>
		</DataField>
		<DataField name="('med-dfs', 'C')" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="1.9" rightMargin="4.0"/>
		</DataField>
		<DataField name="('med-dfs', 'D')" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="2.4" rightMargin="4.0"/>
		</DataField>
		<DataField name="('med-dfs', 'G')" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="8.1" rightMargin="16.9"/>
		</DataField>
		<DataField name="('med-dfs', 'W')" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="1.9" rightMargin="4.0"/>
		</DataField>
		<DataField name="('70.0th-pctl-dfs', 'C')" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="4.379999999999998" rightMargin="8.7"/>
		</DataField>
		<DataField name="('70.0th-pctl-dfs', 'G')" optype="continuous" dataType="double">
			<Interval closure="closedClosed" leftMargin="12.62" rightMargin="18.8"/>
		</DataField>
	</DataDictionary>
	<MiningModel functionName="regression" algorithmName="sklearn.ensemble._weight_boosting.AdaBoostRegressor">
		<MiningSchema>
			<MiningField name="top_score" usageType="target"/>
			<MiningField name="best-possible-score" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="team_count" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="team-med" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="team-70.0th_pctl" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="('med-dfs', 'C')" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="('med-dfs', 'D')" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="('med-dfs', 'G')" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="('med-dfs', 'W')" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="('70.0th-pctl-dfs', 'C')" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
			<MiningField name="('70.0th-pctl-dfs', 'G')" missingValueTreatment="asIs" invalidValueTreatment="asIs"/>
		</MiningSchema>
		<ModelStats>
			<UnivariateStats field="best-possible-score">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="133.20000000000002" maximum="185.9" mean="155.70625" standardDeviation="15.121320575184562" median="150.5" interQuartileRange="19.849999999999966"/>
			</UnivariateStats>
			<UnivariateStats field="team_count">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="4.0" maximum="16.0" mean="10.375" standardDeviation="3.550968177835448" median="10.0" interQuartileRange="4.0"/>
			</UnivariateStats>
			<UnivariateStats field="team-med">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="2.5" maximum="3.5" mean="2.9375" standardDeviation="0.29973947020704494" median="3.0" interQuartileRange="0.125"/>
			</UnivariateStats>
			<UnivariateStats field="team-70.0th_pctl">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="3.0" maximum="4.0" mean="3.66875" standardDeviation="0.4440140059727848" median="4.0" interQuartileRange="0.9250000000000016"/>
			</UnivariateStats>
			<UnivariateStats field="('med-dfs', 'C')">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="1.9" maximum="4.0" mean="3.09375" standardDeviation="0.7042005662451573" median="3.2" interQuartileRange="0.9625000000000004"/>
			</UnivariateStats>
			<UnivariateStats field="('med-dfs', 'D')">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="2.4" maximum="4.0" mean="3.26875" standardDeviation="0.4892197231306195" median="2.95" interQuartileRange="0.8250000000000002"/>
			</UnivariateStats>
			<UnivariateStats field="('med-dfs', 'G')">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="8.1" maximum="16.9" mean="10.7625" standardDeviation="2.2175084554517484" median="9.8" interQuartileRange="1.8999999999999986"/>
			</UnivariateStats>
			<UnivariateStats field="('med-dfs', 'W')">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="1.9" maximum="4.0" mean="3.1062499999999997" standardDeviation="0.5942103478567166" median="2.9" interQuartileRange="0.8625000000000003"/>
			</UnivariateStats>
			<UnivariateStats field="('70.0th-pctl-dfs', 'C')">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="4.379999999999998" maximum="8.7" mean="5.934374999999998" standardDeviation="1.1796713988967436" median="5.8" interQuartileRange="1.754999999999999"/>
			</UnivariateStats>
			<UnivariateStats field="('70.0th-pctl-dfs', 'G')">
				<Counts totalFreq="16" missingFreq="0" invalidFreq="0"/>
				<NumericInfo minimum="12.62" maximum="18.8" mean="15.973749999999999" standardDeviation="2.080008638804176" median="15.619999999999997" interQuartileRange="2.9399999999999995"/>
			</UnivariateStats>
		</ModelStats>
		<LocalTransformations>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.9792956591059857</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">0.181510281273423</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.006861315539452866</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.004562019523157543</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">-0.0027078419288216306</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">-0.005758832916034428</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">-0.07564832280987645</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">0.0063304755331360695</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.01473211044855407</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.04411195833327774</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.14302826204137017</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.8030124416297368</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.052539614496327214</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.05266117330162981</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">-0.16820016103019741</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">-0.03859515622059658</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">0.1945186131234983</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">0.10052816335222285</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">-0.16397955288736168</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.47388474134801084</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.1137973610712333</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.1456678968604862</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.046251663729185204</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.034656329975296045</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">0.031742915151044944</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">0.007436617664787381</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">0.767385327630725</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">0.01598762006339926</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">-0.03590134201994763</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">0.6091002212040096</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.07619722380094396</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.507935380500089</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.025175065662118037</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">-0.018305573362344656</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">-0.030850710779758542</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">-0.040928497728604005</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">-0.5809371563273649</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">-0.15781109050177924</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.062321897779751695</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">0.605246649938808</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.014776739448397046</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.15051496378293494</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.05840580780205633</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">-0.04743889063241199</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">0.32016932306026635</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">-0.03954786653740841</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">0.07259547062717367</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">0.1658783567403748</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.9081905538694794</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.09897961413595191</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.019168203412360085</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.039884854193850655</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">-0.08710607646669292</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">-0.5269168366114599</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">-0.2193388443807934</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">0.4479403595471723</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">0.12145811307703513</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">-0.6423826831535598</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.1650367009685946</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.09699569702764398</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.009128525608293792</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.05875017023016025</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.33194398817977006</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.3934329354074092</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">0.4918465430744268</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">0.6759785873361976</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">-0.04932835705048047</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">-0.0987942397799492</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">-0.13707330572340753</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.04057153349233838</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">-0.01975382291275433</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">0.07453608027907298</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.028541327740402862</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.2901152460370486</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">-0.7158620253015585</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">0.4487831569387008</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">-0.04180777046028485</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">0.3518926602916383</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.2470713373356322</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">0.09266798181206705</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">-0.013922306007791716</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">0.05725134878730265</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">0.1586156850812186</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.6177927604730471</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">-0.20389979410682935</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">-0.3363373792698382</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">0.07395298901423158</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">-0.6225139078279329</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.18788026764830573</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.08192715230566476</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]" optype="continuous" dataType="double">
				<Apply function="sum">
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="best-possible-score"/>
							<Constant dataType="double">155.70625</Constant>
						</Apply>
						<Constant dataType="double">0.02266993288571603</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team_count"/>
							<Constant dataType="double">10.375</Constant>
						</Apply>
						<Constant dataType="double">-0.08048022626903142</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-med"/>
							<Constant dataType="double">2.9375</Constant>
						</Apply>
						<Constant dataType="double">-0.9204675169470912</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="team-70.0th_pctl"/>
							<Constant dataType="double">3.66875</Constant>
						</Apply>
						<Constant dataType="double">0.308470107129505</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'C')"/>
							<Constant dataType="double">3.09375</Constant>
						</Apply>
						<Constant dataType="double">0.15224152876436198</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'D')"/>
							<Constant dataType="double">3.26875</Constant>
						</Apply>
						<Constant dataType="double">0.15184202286989</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'G')"/>
							<Constant dataType="double">10.7625</Constant>
						</Apply>
						<Constant dataType="double">0.019980567754942287</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('med-dfs', 'W')"/>
							<Constant dataType="double">3.1062499999999997</Constant>
						</Apply>
						<Constant dataType="double">-0.05840048545533125</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'C')"/>
							<Constant dataType="double">5.934374999999998</Constant>
						</Apply>
						<Constant dataType="double">0.023264118383922228</Constant>
					</Apply>
					<Apply function="*">
						<Apply function="-">
							<FieldRef field="('70.0th-pctl-dfs', 'G')"/>
							<Constant dataType="double">15.973749999999999</Constant>
						</Apply>
						<Constant dataType="double">-0.003195088773669818</Constant>
					</Apply>
				</Apply>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3])"/>
			</DerivedField>
			<DerivedField name="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9])" optype="continuous" dataType="float">
				<FieldRef field="pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]"/>
			</DerivedField>
			<DerivedField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" optype="continuous" dataType="double">
				<FieldRef field="float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9])"/>
			</DerivedField>
		</LocalTransformations>
		<Segmentation multipleModelMethod="weightedMedian">
			<Segment id="1" weight="0.231232358871379">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="142.69999999999993">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.14211485534906387"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.721681535243988"/>
							</Node>
							<Node score="143.7">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.18017680197954178"/>
							</Node>
						</Node>
						<Node score="119.36666666666667">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-8.261569499969482"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.3084312379360199"/>
							</Node>
						</Node>
						<Node score="130.0">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.39353010058403015"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="2" weight="0.18692259160704858">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="1.0252316892147064"/>
							<Node score="128.59999999999997">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.918184816837311"/>
								<Node score="119.41999999999999">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.14039836474694312"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.17702612839639187"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="3" weight="0.18267347048169">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="130.8">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.16526061296463013"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.22082345187664032"/>
							</Node>
							<Node score="145.80000000000004">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="1.544309377670288"/>
							</Node>
						</Node>
						<Node score="117.65714285714287">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.20675477385520935"/>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.6769475117325783"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="4" weight="0.19843927751862792">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-1.2026915550231934"/>
								<Node score="122.87142857142855">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6093981266021729"/>
								</Node>
							</Node>
							<Node score="142.39999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="18.88790988922119"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="5" weight="0.1668246122801129">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="133.4">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-3.039829730987549"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								<Node score="119.0">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-9.074440002441406"/>
								</Node>
							</Node>
						</Node>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.43138698674738407"/>
							<Node score="145.80000000000004">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="1.720380961894989"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="6" weight="0.19933199421143774">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.5092093348503113"/>
							<Node score="138.29999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.10998737812042236"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
								</Node>
							</Node>
							<Node score="120.25999999999999">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.14232710003852844"/>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="9.633083820343018"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="7" weight="0.18908050938094473">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.53333333333333">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.53961944580078"/>
							<Node score="120.0">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.886266708374023"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17486682534217834"/>
								</Node>
							</Node>
							<Node score="130.93333333333334">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.2687307223677635"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="8" weight="0.21437588298394067">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="115.40000000000002">
						<True/>
						<Node score="121.3">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.10998737812042236"/>
							<Node score="143.975">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.37539201974868774"/>
								<Node score="155.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.721681535243988"/>
								</Node>
							</Node>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="0.6273159496486187"/>
							</Node>
						</Node>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.12917539477348328"/>
						</Node>
						<Node score="107.80000000000001">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07260585948824883"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="9" weight="0.17682661419978554">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="142.54999999999995">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="116.95000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.03179264813661575"/>
								<Node score="108.65">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-12.038482189178467"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.0497742872685194"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.191958785057068"/>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.2643325477838516"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="10" weight="0.24248035263891504">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-1.2026915550231934"/>
								<Node score="116.76000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.9148856103420258"/>
								</Node>
							</Node>
							<Node score="142.49999999999997">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.03911565989255905"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.2855904996395111"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="11" weight="0.1790124429187788">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="119.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.713800609111786"/>
								<Node score="125.29999999999998">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.026362121105194092"/>
								</Node>
							</Node>
						</Node>
						<Node score="144.10000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.3761097714304924"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="12" weight="0.22928520829710342">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.5801370739936829"/>
							<Node score="128.59999999999997">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.8379929661750793"/>
								<Node score="120.60000000000001">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.886266708374023"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.33333333333334">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.2035866193473339"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.0930235385894775"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="13" weight="0.18217238489821214">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="143.7">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.08448676578700542"/>
							<Node score="122.6">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								<Node score="133.77499999999998">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.1174960508942604"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.6965915858745575"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.5887981355190277"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="14" weight="0.17200787404482548">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-8.469740867614746"/>
							<Node score="119.09999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.3956102430820465"/>
								<Node score="119.90000000000005">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.49802345037460327"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="1.047310322523117"/>
							<Node score="144.75">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6460836976766586"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.5147079974412918"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="15" weight="0.21303791859468701">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="125.85">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="1.047310322523117"/>
							<Node score="127.35">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.10998737812042236"/>
								<Node score="143.71999999999997">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.37539201974868774"/>
								</Node>
							</Node>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.11016654968261719"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="16" weight="0.13815944322873314">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="145.80000000000004">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="128.59999999999997">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								<Node score="119.98571428571427">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.886266708374023"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.0930235385894775"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="17" weight="0.21006918293957644">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="130.44">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.5801370739936829"/>
							<Node score="119.20000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.20675477385520935"/>
								</Node>
							</Node>
							<Node score="143.19999999999996">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.14211485534906387"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="143.95000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.2249337434768677"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="18" weight="0.22038306085888643">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="128.59999999999997">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								<Node score="120.78571428571426">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.33142369240522385"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.6965915858745575"/>
							</Node>
						</Node>
						<Node score="144.25">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.15286185592412949"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.3761097714304924"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="19" weight="0.2048686477042166">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.53961944580078"/>
							<Node score="120.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-1.2026915550231934"/>
								<Node score="108.36666666666667">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07260585948824883"/>
								</Node>
							</Node>
							<Node score="132.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.47662796825170517"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="20" weight="0.14396508378891665">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="142.69999999999993">
						<True/>
						<Node score="119.84">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.2543734274804592"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.7970486283302307"/>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.8469057977199554"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.0930235385894775"/>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.2643325477838516"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="21" weight="0.15556851773349822">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="16.455519199371338"/>
							<Node score="108.36666666666667">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.28784210979938507"/>
								<Node score="118.01250000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								</Node>
							</Node>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.02939222753047943"/>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-1.0225292146205902"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="22" weight="0.20832798659443968">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="119.90000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.11030775308609009"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
								</Node>
							</Node>
							<Node score="118.89999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.15865424275398254"/>
							</Node>
						</Node>
						<Node score="144.35000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.1553313061594963"/>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.5032089203596115"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.5147079974412918"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="23" weight="0.18166195711746386">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="143.19999999999996">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="1.0252316892147064"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
								<Node score="120.60000000000001">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.33575454354286194"/>
								</Node>
							</Node>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.19519564509391785"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="24" weight="0.11853160147136924">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="9.50433874130249"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.2289688065648079"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.25579237937927246"/>
								</Node>
							</Node>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.02356773614883423"/>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.15308070927858353"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="25" weight="0.14305113451603732">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.53961944580078"/>
							<Node score="120.46000000000001">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.47120290994644165"/>
								<Node score="132.10000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.6424236297607422"/>
								</Node>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="1.1132221221923828"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="26" weight="0.17703677199518025">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="145.80000000000004">
						<True/>
						<Node score="115.40000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.5801370739936829"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.7970486283302307"/>
								<Node score="143.7">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.14195139706134796"/>
								</Node>
							</Node>
							<Node score="120.25000000000001">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.886266708374023"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.5879582669585943"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
							</Node>
						</Node>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="13.350775718688965"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="27" weight="0.15485241349711765">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.35794855654239655"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.39157967269420624"/>
								<Node score="116.8875">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="9.65596628189087"/>
								</Node>
							</Node>
							<Node score="142.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="0.8716083765029907"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="28" weight="0.23421088379497404">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.3956102430820465"/>
								<Node score="119.90000000000003">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.33575454354286194"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.6965915858745575"/>
							</Node>
						</Node>
						<Node score="134.94">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.34737979993224144"/>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-1.90855048969388"/>
							</Node>
						</Node>
						<Node score="152.26666666666668">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.15308070927858353"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="29" weight="0.20338553548994098">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.11116816848516464"/>
								<Node score="121.64999999999999">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.3253011666238308"/>
								</Node>
							</Node>
						</Node>
						<Node score="142.49999999999997">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="131.45">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.47662796825170517"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.13366222381591797"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="30" weight="0.16330797381782444">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="145.80000000000004">
						<True/>
						<Node score="119.90000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.11030775308609009"/>
							</Node>
							<Node score="118.79999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.6446720361709595"/>
							</Node>
						</Node>
						<Node score="122.0">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.2687307223677635"/>
							<Node score="131.66666666666669">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.9813679195940495"/>
							</Node>
						</Node>
						<Node score="142.64999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="18.88790988922119"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="31" weight="0.21648143088642816">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="122.74285714285715">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.08448676578700542"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17486682534217834"/>
								</Node>
							</Node>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.1142975203692913"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="32" weight="0.1733559567217723">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.757521629333496"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.0210726261138916"/>
								<Node score="119.70000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-10.098707675933838"/>
								</Node>
							</Node>
						</Node>
						<Node score="144.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.0524955689907074"/>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.8195383846759796"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="33" weight="0.17240352941009882">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="117.76000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.14211485534906387"/>
								<Node score="143.36666666666665">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.22801385819911957"/>
								</Node>
							</Node>
							<Node score="132.53333333333333">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.8039705455303192"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="34" weight="0.2197157648918597">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="119.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.3956102430820465"/>
								<Node score="122.0">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.026362121105194092"/>
								</Node>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.1771132349967957"/>
							</Node>
						</Node>
						<Node score="132.10000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="143.95000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.6663676388561726"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.5147079974412918"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="35" weight="0.15830244745027777">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="142.85999999999999">
						<True/>
						<Node score="115.40000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.27016339637339115"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.027585536241531372"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.9234617650508881"/>
								</Node>
							</Node>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.15782009065151215"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.20395535975694656"/>
						</Node>
						<Node score="118.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.09751471132040024"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="36" weight="0.2155988398361966">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.629673957824707"/>
								<Node score="119.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.32869261503219604"/>
								</Node>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="143.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6460836976766586"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="12.963269710540771"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="37" weight="0.20187356055101155">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="143.16666666666666">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								<Node score="120.60000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.15241945534944534"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.6965915858745575"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.26268523931503296"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.5147079974412918"/>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.07468980550765991"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="38" weight="0.19029055879441986">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="118.60000000000001">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="4.120590329170227"/>
								<Node score="107.23333333333333">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07260585948824883"/>
								</Node>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="143.33333333333334">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.03911565989255905"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="39" weight="0.19060368376147543">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="119.90000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.11030775308609009"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.183331847190857"/>
								</Node>
							</Node>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.041103728115558624"/>
							</Node>
						</Node>
						<Node score="143.425">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="132.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.24480091035366058"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.43430863320827484"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="40" weight="0.16764454251159008">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="119.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.27016339637339115"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.027585536241531372"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.6965915858745575"/>
								</Node>
							</Node>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.14039836474694312"/>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.2035866193473339"/>
							<Node score="143.16666666666666">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="13.350775718688965"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="41" weight="0.14373245736258491">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.08448676578700542"/>
							<Node score="120.2333333333333">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.5801370739936829"/>
								<Node score="130.8">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-1.4393556118011475"/>
								</Node>
							</Node>
							<Node score="145.80000000000004">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="1.720380961894989"/>
							</Node>
						</Node>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.22801385819911957"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="42" weight="0.2245386072772544">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="133.4">
						<True/>
						<Node score="119.70000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.06577741727232933"/>
							</Node>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.3506149351596832"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.47059474885463715"/>
							<Node score="144.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.22801385819911957"/>
							</Node>
						</Node>
						<Node score="122.0">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="9.65596628189087"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="43" weight="0.22289299491625789">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="138.54999999999998">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.08448676578700542"/>
							<Node score="119.09999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.713800609111786"/>
								<Node score="121.58">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="1.4312032461166382"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.21598583459854126"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
							</Node>
						</Node>
						<Node score="119.90000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.3039604425430298"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="44" weight="0.13155858408843554">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.03862109035253525"/>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.11116816848516464"/>
								<Node score="119.9">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.14039836474694312"/>
								</Node>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.346960186958313"/>
							<Node score="143.7">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.16526061296463013"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.191958785057068"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="45" weight="0.190965448304166">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.14211485534906387"/>
							<Node score="142.69999999999993">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.22801385819911957"/>
								<Node score="143.7">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="1.488060474395752"/>
								</Node>
							</Node>
						</Node>
						<Node score="108.36666666666667">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-1.2026915550231934"/>
							<Node score="119.80000000000001">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.02356773614883423"/>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.07468980550765991"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="46" weight="0.14523767178758107">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="119.2">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6225846260786057"/>
								<Node score="107.8">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-13.062749862670898"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.95000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.5117238909006119"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="47" weight="0.19147632971825412">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.792474415153265"/>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.05833590775728226"/>
								</Node>
							</Node>
							<Node score="130.9">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6245350539684296"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="16.68096160888672"/>
							<Node score="142.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-1.4012355655431747"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="48" weight="0.13727715321428888">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="133.4">
						<True/>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.08448676578700542"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-13.062749862670898"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.0805816762149334"/>
								</Node>
							</Node>
							<Node score="119.96">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.34053559601306915"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6460836976766586"/>
							<Node score="143.7">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.061315298080444336"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="49" weight="0.1611296061542686">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="133.4">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-10.058480262756348"/>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.5298409759998322"/>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
							</Node>
						</Node>
						<Node score="160.70000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.47059474885463715"/>
							<Node score="143.29999999999995">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.9543039500713348"/>
							</Node>
						</Node>
						<Node score="115.40000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-1.90855048969388"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="50" weight="0.25157510660498417">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="137.07142857142858">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-10.058480262756348"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.183331847190857"/>
								</Node>
							</Node>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-3.1512396335601807"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="51" weight="0.18446282833524258">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="142.89999999999998">
						<True/>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.663493275642395"/>
						</Node>
						<Node score="120.36666666666669">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.06577741727232933"/>
							</Node>
						</Node>
						<Node score="130.95999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.39353010058403015"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="52" weight="0.15020816146123855">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.53961944580078"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
								<Node score="121.24444444444445">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.713800609111786"/>
								</Node>
							</Node>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="0.24328194186091423"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="53" weight="0.16909834502786633">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="143.17499999999998">
						<True/>
						<Node score="115.40000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.027585536241531372"/>
							</Node>
							<Node score="120.83333333333333">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.5685118176043034"/>
							</Node>
						</Node>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.9113495945930481"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.6769475117325783"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-1.073946475982666"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="54" weight="0.21493221975191254">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.08448676578700542"/>
								<Node score="118.575">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.9148856103420258"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.53333333333333">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.2035866193473339"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.721681535243988"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="55" weight="0.2337110577802354">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6093981266021729"/>
								<Node score="120.56666666666666">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.33142369240522385"/>
								</Node>
							</Node>
						</Node>
						<Node score="144.76666666666668">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="131.66666666666669">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.40008722990751266"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="56" weight="0.14340292520479384">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="142.29999999999998">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="117.20000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.03862109035253525"/>
								<Node score="108.65">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-12.038482189178467"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.1869172900915146"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.5214015543460846"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="57" weight="0.15482167482387604">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="115.40000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="119.09999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.33142369240522385"/>
								<Node score="119.90000000000003">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.49802345037460327"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.35801249742507935"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.25456632673740387"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.5147079974412918"/>
							</Node>
						</Node>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.47662796825170517"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="58" weight="0.15574358113068">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.8379929661750793"/>
								<Node score="117.48000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.629673957824707"/>
								</Node>
							</Node>
						</Node>
						<Node score="145.06000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.2035866193473339"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.307220421731472"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="59" weight="0.15234624576205005">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="131.32">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="119.63333333333334">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-8.469740867614746"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.019911741837859154"/>
								</Node>
							</Node>
							<Node score="149.6">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.16526061296463013"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="60" weight="0.15630862948331004">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="109.5">
						<True/>
						<Node score="143.6">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.01198619231581688"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.5117238909006119"/>
							</Node>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.3309812545776367"/>
							</Node>
						</Node>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.25010038912296295"/>
						</Node>
						<Node score="119.43333333333335">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.9148856103420258"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="61" weight="0.17030495968472392">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="131.45000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24772867560386658"/>
								<Node score="118.9125">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
								</Node>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="62" weight="0.11398041700604299">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="133.4">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								<Node score="120.25">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.886266708374023"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.3790515512228012"/>
						</Node>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="16.607146739959717"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="63" weight="0.20385380772869227">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="121.64999999999999">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.027585536241531372"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.0805816762149334"/>
								</Node>
							</Node>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.429046276723966"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.25456632673740387"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.43430863320827484"/>
							</Node>
						</Node>
						<Node score="130.8">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.24846243858337402"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="64" weight="0.19145510142226924">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.792474415153265"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
								<Node score="119.90000000000003">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.32869261503219604"/>
								</Node>
							</Node>
							<Node score="131.29999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.453958958387375"/>
							</Node>
						</Node>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.0524955689907074"/>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="65" weight="0.19278442573320376">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.1553313061594963"/>
							<Node score="112.45000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.18478509038686752"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.15268346667289734"/>
								</Node>
							</Node>
							<Node score="143.36666666666665">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.5092093348503113"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="12.963269710540771"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="66" weight="0.26247391599983727">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="4.120590329170227"/>
								<Node score="120.46000000000001">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.1190691702067852"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.53333333333333">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="132.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.40008722990751266"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.43430863320827484"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="67" weight="0.2598785663444144">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-10.058480262756348"/>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.5298409759998322"/>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.0998518094420433"/>
							</Node>
						</Node>
						<Node score="143.82500000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.1553313061594963"/>
							<Node score="130.25">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.11344440281391144"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.191958785057068"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="68" weight="0.16833623715159335">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.34737979993224144"/>
							<Node score="122.75999999999999">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.8379929661750793"/>
								<Node score="130.8">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.26630186289548874"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.95000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.2035866193473339"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.5117238909006119"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="69" weight="0.1911156805946432">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.1190691702067852"/>
								<Node score="119.20000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.035326767480000854"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.17999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.1553313061594963"/>
							<Node score="130.06666666666666">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.2687307223677635"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="70" weight="0.19115059252609842">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="120.60000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.027585536241531372"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
								</Node>
							</Node>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-2.6842616200447083"/>
							</Node>
						</Node>
						<Node score="143.95000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.7920548021793365"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="71" weight="0.1552236375947319">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="109.5">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.7315258383750916"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.37041934579610825"/>
								<Node score="130.8">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.11627276986837387"/>
								</Node>
							</Node>
						</Node>
						<Node score="119.72500000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-2.6842616200447083"/>
							</Node>
						</Node>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.21154122054576874"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="72" weight="0.1963792937430132">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-8.469740867614746"/>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.713800609111786"/>
								<Node score="119.09999999999998">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.8261208534240723"/>
								</Node>
							</Node>
						</Node>
						<Node score="143.86666666666667">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="132.53333333333333">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.24480091035366058"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="73" weight="0.18161803791430067">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="119.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
								<Node score="108.36666666666667">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07260585948824883"/>
								</Node>
							</Node>
							<Node score="132.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.13809674978256226"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="74" weight="0.2559112762426347">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="108.36666666666667">
						<True/>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.25829067826271057"/>
							<Node score="145.80000000000004">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.15308070927858353"/>
							</Node>
						</Node>
						<Node score="143.36666666666665">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.10998737812042236"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.5214015543460846"/>
							</Node>
						</Node>
						<Node score="119.71666666666665">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.3956102430820465"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="75" weight="0.17165038998487883">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="119.90000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-1.4420787692070007"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.20675477385520935"/>
							</Node>
							<Node score="122.0">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.001289907842874527"/>
							</Node>
						</Node>
						<Node score="144.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="1.047310322523117"/>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.14871597290039062"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.46148807741701603"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="76" weight="0.17011010196240095">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="143.04999999999998">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.27016339637339115"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.7970486283302307"/>
							</Node>
							<Node score="119.22">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.02500317245721817"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.0497742872685194"/>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.2836143970489502"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="77" weight="0.24529728283257712">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="116.95">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07104308903217316"/>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.26656903326511383"/>
							</Node>
							<Node score="107.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-12.038482189178467"/>
							</Node>
						</Node>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.43030136823654175"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.191958785057068"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="78" weight="0.17766046532781302">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="145.80000000000004">
						<True/>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="119.09999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.1564105153083801"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.012727821245789528"/>
								</Node>
							</Node>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.6965915858745575"/>
							</Node>
						</Node>
						<Node score="132.10000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.11344440281391144"/>
							<Node score="115.40000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
							</Node>
						</Node>
						<Node score="142.89999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="13.350775718688965"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="79" weight="0.16339623486860483">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="118.86666666666669">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="0.8254493735730648"/>
							<Node score="143.7">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.7315258383750916"/>
								<Node score="131.23333333333335">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.37041934579610825"/>
								</Node>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.8469057977199554"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.35830388963222504"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="80" weight="0.14393273693962655">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.06390557438135147"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="1.7727668583393097"/>
							</Node>
						</Node>
						<Node score="143.04999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="129.7">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.2687307223677635"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="81" weight="0.16184120188321102">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="143.7">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.10661187418736517"/>
							<Node score="118.79999999999998">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.713800609111786"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.25579237937927246"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.20506060682237148"/>
							<Node score="171.10000000000005">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
							</Node>
						</Node>
						<Node score="142.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="0.8716083765029907"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="82" weight="0.19683365273845624">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.14804932475090027"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.5893088430166245"/>
							</Node>
						</Node>
						<Node score="108.36666666666667">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.39157967269420624"/>
							<Node score="117.28333333333336">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.3956102430820465"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="83" weight="0.17571525112488987">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6225846260786057"/>
								<Node score="117.68750000000003">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6093981266021729"/>
								</Node>
							</Node>
						</Node>
						<Node score="145.80000000000004">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.5117238909006119"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="84" weight="0.17335372289593157">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="133.4">
						<True/>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.2418220341205597"/>
							<Node score="145.80000000000004">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.37077319622039795"/>
								<Node score="155.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.0930235385894775"/>
								</Node>
							</Node>
						</Node>
						<Node score="119.90000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="0.3289119005203247"/>
							</Node>
						</Node>
						<Node score="142.85999999999999">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6460836976766586"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="85" weight="0.22531282838513014">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="143.95000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.10398239456117153"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-1.2026915550231934"/>
								<Node score="117.38000000000002">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.6093981266021729"/>
								</Node>
							</Node>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.7265320122241974"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="86" weight="0.15715765691099823">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="144.225">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-8.469740867614746"/>
								<Node score="119.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.0210726261138916"/>
								</Node>
							</Node>
							<Node score="131.32">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.24480091035366058"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="87" weight="0.18867582726554366">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-6.757521629333496"/>
							<Node score="119.63333333333334">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.0673083066940308"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.06375409290194511"/>
								</Node>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-1.1771132349967957"/>
							</Node>
						</Node>
						<Node score="143.95000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.13809674978256226"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.24750948697328568"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="88" weight="0.20572586987022712">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="121.3">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="143.7">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.7315258383750916"/>
								<Node score="131.66666666666669">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.453958958387375"/>
								</Node>
							</Node>
							<Node score="113.92500000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.0654219388961792"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="89" weight="0.1929465267207748">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="150.65000000000003">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.4453417956829071"/>
							<Node score="113.43333333333335">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
								<Node score="120.05000000000001">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.5685118176043034"/>
								</Node>
							</Node>
							<Node score="132.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.7265320122241974"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="90" weight="0.23248508783655472">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="107.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6225846260786057"/>
								<Node score="118.22">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.46704182028770447"/>
								</Node>
							</Node>
						</Node>
						<Node score="132.10000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="142.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="5.748488903045654"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="91" weight="0.19523549672135956">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="130.8">
						<True/>
						<Node score="144.06666666666663">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.10998737812042236"/>
							<Node score="155.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.5117238909006119"/>
							</Node>
							<Node score="133.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.40008722990751266"/>
							</Node>
						</Node>
						<Node score="106.1">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="1.9020519256591797"/>
							<Node score="118.16666666666669">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.5582423806190491"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="92" weight="0.1491676338186068">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-1.0673083066940308"/>
								<Node score="119.90000000000003">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-15.796423435211182"/>
								</Node>
							</Node>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="1.1132221221923828"/>
							</Node>
						</Node>
						<Node score="144.21666666666667">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="27.387991905212402"/>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="-0.022225022315979004"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="93" weight="0.23315066985485486">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="118.90000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6225846260786057"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.20675477385520935"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.2035866193473339"/>
							<Node score="143.95000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="2.2249337434768677"/>
							</Node>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="94" weight="0.15977998475036537">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
					</MiningSchema>
					<Node score="145.80000000000004">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="108.82000000000001">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6225846260786057"/>
								<Node score="120.4">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="-0.01792745292186737"/>
								</Node>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.5117238909006119"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="95" weight="0.14475423992864164">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="142.1">
						<True/>
						<Node score="121.3">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07260585948824883"/>
								<Node score="106.09999999999998">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.0805816762149334"/>
								</Node>
							</Node>
							<Node score="119.82500000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[5]))" operator="lessOrEqual" value="0.32869261503219604"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="1.5253798961639404"/>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="0.6709346175193787"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="96" weight="0.21191292400718129">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="122.0">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.07104308903217316"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-12.038482189178467"/>
								<Node score="109.5">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="-0.17078043520450592"/>
								</Node>
							</Node>
							<Node score="118.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="0.2289688065648079"/>
							</Node>
						</Node>
						<Node score="142.89999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.1553313061594963"/>
							<Node score="121.3">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.46927582286298275"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-0.5147079974412918"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="97" weight="0.18619186509833693">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="155.5">
						<True/>
						<Node score="118.79999999999998">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.4454731941223145"/>
							<Node score="106.1">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-1.668781816959381"/>
							</Node>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-17.17172622680664"/>
							</Node>
						</Node>
						<Node score="144.35000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="132.10000000000002">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.24480091035366058"/>
							</Node>
						</Node>
						<Node score="171.10000000000005">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.21882940828800201"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="98" weight="0.20092588006882123">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="143.325">
						<True/>
						<Node score="143.7">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-4.920383453369141"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[7]))" operator="lessOrEqual" value="0.6225846260786057"/>
								<Node score="120.85999999999999">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="2.713800609111786"/>
								</Node>
							</Node>
						</Node>
						<Node score="133.4">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[2]))" operator="lessOrEqual" value="-0.8195383846759796"/>
							<Node score="130.8">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="-0.011040829122066498"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.3761097714304924"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="99" weight="0.16338371246945507">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))"/>
					</MiningSchema>
					<Node score="171.10000000000005">
						<True/>
						<Node score="109.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[8]))" operator="lessOrEqual" value="0.1190691702067852"/>
								<Node score="121.3">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.05833590775728226"/>
								</Node>
							</Node>
						</Node>
						<Node score="142.83333333333331">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[9]))" operator="lessOrEqual" value="0.16144702583551407"/>
							<Node score="131.4">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[4]))" operator="lessOrEqual" value="-0.2687307223677635"/>
							</Node>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.43430863320827484"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
			<Segment id="100" weight="0.1787565700760409">
				<True/>
				<TreeModel functionName="regression" algorithmName="sklearn.tree._classes.DecisionTreeRegressor" missingValueStrategy="nullPrediction" noTrueChildStrategy="returnLastPrediction">
					<MiningSchema>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))"/>
						<MiningField name="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))"/>
					</MiningSchema>
					<Node score="139.87142857142854">
						<True/>
						<Node score="121.3">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-7.094438076019287"/>
							<Node score="109.5">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[3]))" operator="lessOrEqual" value="-0.027585536241531372"/>
								<Node score="106.1">
									<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="1.1132221221923828"/>
								</Node>
							</Node>
							<Node score="119.90000000000003">
								<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[0]))" operator="lessOrEqual" value="-15.796423435211182"/>
							</Node>
						</Node>
						<Node score="115.40000000000002">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[1]))" operator="lessOrEqual" value="-3.1512396335601807"/>
						</Node>
						<Node score="155.5">
							<SimplePredicate field="double(float(pca(best-possible-score, team_count, .., ('70.0th-pctl-dfs', 'C'), ('70.0th-pctl-dfs', 'G'))[6]))" operator="lessOrEqual" value="-0.4425869882106781"/>
						</Node>
					</Node>
				</TreeModel>
			</Segment>
		</Segmentation>
	</MiningModel>
</PMML>
